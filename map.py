# -*- coding: utf-8 -*-
"""map.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuCWhcHtbGVvR2TW2RhFZd1_CpV2z0Qx
"""

import pandas as pd

file = pd.read_csv("SampleofData.csv")
print(file)

import PIL
image= PIL.Image.open('Lekagul_Roadways.bmp')
rgb_image = image.convert('RGB')
rgb_image.size

def is_colored(a, b, c, diff):
    if abs(int(a)-int(b)) > diff:
        return True
    elif abs(int(a)-int(c)) > diff:
        return True
    elif abs(int(b)-int(c)) > diff:
        return True
    return False

def is_white(a, b, c, diff, limit):
    if a >= limit and b >= limit and c >= limit:
        if not is_colored(a, b, c, diff):
            return True
    return False

road_bitmap = [[0]*200 for i in range(200)]
sensors = []
for i in range(200):
    for j in range(200):
        (r, g, b) = rgb_image.getpixel((i, j))
        if is_colored(r, g, b, 20):
            road_bitmap[i][j] = 2
            sensors.append((i, j))
        if is_white(r, g, b, 255, 20):
            road_bitmap[i][j] = 1

img = PIL.Image.new( 'RGB', (200,200), "black")
pixels = img.load()
for i in range(len(road_bitmap)):
    for j in range(len(road_bitmap[0])):
        if road_bitmap[i][j] == 1:
            pixels[i,j] = (255, 255, 255)
        if road_bitmap[i][j] == 2:
            pixels[i,j] = (255, 0, 0)
img.show()

class Current:
    def __init__(self, row, col, dist):
        self.row = row
        self.col = col
        self.dist = dist

    def __repr__(self):
        return f"Current({self.row}, {self.col}, {self.dist})"

def isValid(x, y, grid, visited):
    if ((x >= 0 and y >= 0) and
        (x < len(grid) and y < len(grid[0])) and
            (grid[x][y] == 1) and (visited[x][y] == False)):
        return True
    return False

def minDist(start, end, grid):
    r, c = start
    er, ec = end
    source = Current(r, c, 0)

    visited = [[False for _ in range(len(grid[0]))]
               for _ in range(len(grid))]

    queue = []
    queue.append(source)
    visited[source.row][source.col] = True

    while len(queue) != 0:
        source = queue.pop(0)
        if er == source.row and ec == source.col:
            return source.dist, visited

        if isValid(source.row - 1, source.col, grid, visited):
            queue.append(Current(source.row - 1, source.col, source.dist + 1))
            visited[source.row - 1][source.col] = True

        if isValid(source.row + 1, source.col, grid, visited):
            queue.append(Current(source.row + 1, source.col, source.dist + 1))
            visited[source.row + 1][source.col] = True

        if isValid(source.row, source.col - 1, grid, visited):
            queue.append(Current(source.row, source.col - 1, source.dist + 1))
            visited[source.row][source.col - 1] = True

        if isValid(source.row, source.col + 1, grid, visited):
            queue.append(Current(source.row, source.col + 1, source.dist + 1))
            visited[source.row][source.col + 1] = True

    return -1, visited

pixel_mile = 12/200
temp_map = road_bitmap.copy()
temp_map[129][50] = 1
dist, visited = minDist((104, 32), (129,50), temp_map)
print("pixels travelled:", dist, "in miles:", dist*pixel_mile)
img = PIL.Image.new( 'RGB', (200,200), "black")
pixels = img.load()
for i in range(len(visited)):
    for j in range(len(visited[0])):
        if visited[i][j]:
            pixels[i,j] = (255, 255, 255)
img.show()